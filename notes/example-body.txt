
<div class="container">
<div class="row">
<div class="col-xs-12">
<span class="label label-info">Lesson</span>
<span class="label label-primary">Weekend</span>
<ul class="breadcrumb">
<li><a href="/react">React</a></li>
<li><a href="/react/react-with-apis">React with APIs</a></li>
<li class="active">Building an API Application with React and Redux</li>
</ul>
<ul class="nav nav-tabs">
<li class="active"><a href="#text" data-toggle="tab">Text</a></li>
</ul>
<div class="tab-content">
<div class="tab-pane active in" id="text">
<p>We&#x27;re now ready to start building an application that makes an API call and uses Redux to handle state. We&#x27;ll begin by writing and testing a new reducer just as we did a few weeks ago when we were first learning Redux. In the process, we&#x27;ll also create constants for our actions as well as action creators, which we&#x27;ll test as well. This content is mostly review but it&#x27;s worth reinforcing good habits like testing and getting more practice with setting up our own reducers.</p>
<h2 id="setting-up-our-project">Setting Up Our Project</h2>
<p>We will modify our existing API project to use Redux.</p>
<p>Add the following directories to <code class="prettyprint prettyprinted"><span class="pln">src</span></code>:</p>
<ul>
<li><code class="prettyprint prettyprinted"><span class="pln">__tests__</span></code></li>
<li><code class="prettyprint prettyprinted"><span class="pln">reducers</span></code></li>
<li><code class="prettyprint prettyprinted"><span class="pln">actions</span></code></li>
</ul>
<p>Next, add the following directories to <code class="prettyprint prettyprinted"><span class="pln">src</span><span class="pun">/</span><span class="pln">__tests__</span></code>:</p>
<ul>
<li><code class="prettyprint prettyprinted"><span class="pln">reducers</span></code></li>
<li><code class="prettyprint prettyprinted"><span class="pln">actions</span></code></li>
</ul>
<p>Now we&#x27;re ready to start planning our application state - and how our reducers will update it.</p>
<h2 id="planning-our-state">Planning Our State</h2>
<p>There is a key difference between the React/Redux applications we built a few weeks ago and the one we&#x27;re building now - this one will incorporate middleware to handle asynchronous code. We&#x27;ll handle the asynchronous code in a future lesson. For now, we&#x27;ll focus on all the reducer actions we can create. Because our reducers need to be pure and can&#x27;t use async code, we can keep our actions very simple.</p>
<p>Instead, let&#x27;s think about the default state of our store and the actions our reducer will need to take for that state to be updated.</p>
<p>We already know what the default state will be - it&#x27;s the same state that we used when we made an API call with just React and <code class="prettyprint prettyprinted"><span class="pln">fetch</span><span class="pun">()</span></code>. The difference is that our state will belong to a Redux store, not a component&#x27;s local state.</p>
<p>Our default state will look like this:</p>
<pre><code class="prettyprint lang-js prettyprinted"><span class="pun">{</span><span class="pln">
  isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
  headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
  error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>This makes sense - before we make an API call, <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> will be set to <code class="prettyprint prettyprinted"><span class="kwd">false</span></code>. Then, when we make the API call, <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> will be set to true. Finally, when the response is returned, <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> will be set to <code class="prettyprint prettyprinted"><span class="kwd">false</span></code> again - and a reducer action will also pass either the current <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> or an <code class="prettyprint prettyprinted"><span class="pln">error</span></code> to the Redux store.</p>
<p>It should be clear that we need to make a distinction between <em>requesting</em> data from an API and <em>receiving</em> data from the API. We can&#x27;t just have a single action handling both of these things - even though we were able to handle both with a single <code class="prettyprint prettyprinted"><span class="pln">makeApiCall</span><span class="pun">()</span></code> method when we just used <code class="prettyprint prettyprinted"><span class="pln">fetch</span><span class="pun">()</span></code> with React.</p>
<p>The act of <em>requesting</em> data, from the perspective of Redux, just means setting <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> to true. We&#x27;ll use an async action to make the actual API call during this time. However, our reducer can&#x27;t worry about that because it needs to be pure. Then, when our async action is complete, it will trigger another action that deals with <em>receiving</em> data. More on that soon.</p>
<p>It should now be clear that our reducer will need three actions:</p>
<ul>
<li><code class="prettyprint prettyprinted"><span class="str">&#x27;REQUEST_HEADLINES&#x27;</span></code>: This action will be dispatched when we <em>request</em> data. It will set <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> to <code class="prettyprint prettyprinted"><span class="kwd">true</span></code>.</li>
<li><code class="prettyprint prettyprinted"><span class="str">&#x27;GET_HEADLINES_SUCCESS&#x27;</span></code>: This action will be dispatched when we receive a response for a successful API call. It will set <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> to <code class="prettyprint prettyprinted"><span class="kwd">false</span></code> and will include a <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> property with the API response&#x27;s payload.</li>
<li><code class="prettyprint prettyprinted"><span class="str">&#x27;GET_HEADLINES_FAILURE&#x27;</span></code>: This action will be dispatched when we receive a response from a failed API call. It will set <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> to <code class="prettyprint prettyprinted"><span class="kwd">false</span></code> and will include an <code class="prettyprint prettyprinted"><span class="pln">error</span></code> property the API response&#x27;s error message.</li>
</ul>
<h3 id="add-constants-for-reducer-actions">Add Constants for Reducer Actions</h3>
<p>Before we go any further, let&#x27;s create constants for our actions (just as we did in the React with Redux course section):</p>
<div class="filename">src/actions/ActionTypes.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> REQUEST_HEADLINES</span><span class="pun">=</span><span class="str">&#x27;REQUEST_HEADLINES&#x27;</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> GET_HEADLINES_FAILURE</span><span class="pun">=</span><span class="str">&#x27;GET_HEADLINES_FAILURE&#x27;</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> GET_HEADLINES_SUCCESS</span><span class="pun">=</span><span class="str">&#x27;GET_HEADLINES_SUCCESS&#x27;</span></code></pre>
<h2 id="testing-and-writing-our-reducers-default-state">Testing and Writing Our Reducer&#x27;s Default State</h2>
<p>Now we have everything we need for our first test. Remember, our reducer should just return the unchanged state if no action is specified.</p>
<p>Here&#x27;s our test:</p>
<div class="filename">src/__tests__/reducers/headlines-reducer.test.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">import</span><span class="pln"> headlinesReducer from </span><span class="str">&#x27;../../reducers/headlines-reducer&#x27;</span><span class="pun">;</span><span class="pln">

describe</span><span class="pun">(</span><span class="str">&#x27;headlinesReducer&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">const</span><span class="pln"> defaultState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
    headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
    error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
  </span><span class="pun">};</span><span class="pln">

  test</span><span class="pun">(</span><span class="str">&#x27;should successfully return the default state if no action is passed into it&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    expect</span><span class="pun">(</span><span class="pln">headlinesReducer</span><span class="pun">(</span><span class="pln">defaultState</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">type</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">})).</span><span class="pln">toEqual</span><span class="pun">(</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
        error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>We start by importing our reducer (which we haven&#x27;t created yet - we&#x27;ll do that in a moment). Then we store the <code class="prettyprint prettyprinted"><span class="pln">defaultState</span></code> in a constant in our <code class="prettyprint prettyprinted"><span class="pln">describe</span></code> block. Finally, our test verifies that if no action type is specified, the same state is returned.</p>
<p>Next, we need to create our reducer:</p>
<div class="filename">src/reducers/headlines-reducer.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">const</span><span class="pln"> defaultState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
  headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
  error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">default</span><span class="pln"> </span><span class="pun">(</span><span class="pln">state </span><span class="pun">=</span><span class="pln"> defaultState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>We store the default state in a constant. For now, our reducer only returns the state that&#x27;s passed in (which defaults to <code class="prettyprint prettyprinted"><span class="pln">defaultState</span></code>). Our test will pass.</p>
<h2 id="testing-and-writing-request_headlines">Testing and Writing <code class="prettyprint prettyprinted"><span class="pln">REQUEST_HEADLINES</span></code></h2>
<p>Now we&#x27;re read to write a test for our <code class="prettyprint prettyprinted"><span class="pln">REQUEST_HEADLINES</span></code> action:</p>
<div class="filename">src/__tests__/reducers/headlines-reducer.test.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="pun">...</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as c from </span><span class="str">&#x27;./../../actions/ActionTypes&#x27;</span><span class="pun">;</span><span class="pln">

describe</span><span class="pun">(</span><span class="str">&#x27;headlinesReducer&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  let action</span><span class="pun">;</span><span class="pln"> </span><span class="com">// Don&#x27;t forget to declare action as a variable.</span><span class="pln">
  </span><span class="pun">...</span><span class="pln">

  </span><span class="pun">...</span><span class="pln">

  test</span><span class="pun">(</span><span class="str">&#x27;requesting headlines should successfully change isLoading from false to true&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    action </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">REQUEST_HEADLINES
    </span><span class="pun">};</span><span class="pln">

    expect</span><span class="pun">(</span><span class="pln">headlinesReducer</span><span class="pun">(</span><span class="pln">defaultState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)).</span><span class="pln">toEqual</span><span class="pun">({</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
        headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
        error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>First, we need to make sure we import our constants from <code class="prettyprint prettyprinted"><span class="typ">ActionTypes</span><span class="pun">.</span><span class="pln">js</span></code>.</p>
<p>The test itself is simple. When we call our new <code class="prettyprint prettyprinted"><span class="pln">REQUEST_HEADLINES</span></code> action, <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> will be updated to <code class="prettyprint prettyprinted"><span class="kwd">true</span></code>. Nothing else about the state will change.</p>
<p>The test will fail - let&#x27;s make it pass.</p>
<div class="filename">src/reducers/headlines-reducer.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as c from </span><span class="str">&#x27;./../actions/ActionTypes&#x27;</span><span class="pun">;</span><span class="pln">

let initialState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
  headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
  error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">default</span><span class="pln"> </span><span class="pun">(</span><span class="pln">state </span><span class="pun">=</span><span class="pln"> initialState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">action</span><span class="pun">.</span><span class="pln">type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">case</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">REQUEST_HEADLINES</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> state</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
      </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>All our new action has to do is us <code class="prettyprint prettyprinted"><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">()</span></code> to create a new copy of <code class="prettyprint prettyprinted"><span class="pln">state</span></code> with <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> set to <code class="prettyprint prettyprinted"><span class="kwd">true</span></code>. Our test will now pass.</p>
<h2 id="testing-and-writing-get_headlines_success">Testing and Writing <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_SUCCESS</span></code></h2>
<p>Next, we&#x27;ll write a test for our <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_SUCCESS</span></code> action. This action will be triggered if our API call is successful. Here&#x27;s the test:</p>
<div class="filename">src/__tests__/reducers/headlines-reducer.test.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="pun">...</span><span class="pln">
describe</span><span class="pun">(</span><span class="str">&#x27;headlinesReducer&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="com">// previous variables</span><span class="pln">

  </span><span class="kwd">const</span><span class="pln"> loadingState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln">
    headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
    error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
  </span><span class="pun">};</span><span class="pln">

  </span><span class="com">// previous tests</span><span class="pln">

  test</span><span class="pun">(</span><span class="str">&#x27;successfully getting headlines should change isLoading to false and update headlines&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> headlines </span><span class="pun">=</span><span class="pln"> </span><span class="str">&quot;A headline&quot;</span><span class="pun">;</span><span class="pln">
    action </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_SUCCESS</span><span class="pun">,</span><span class="pln">
      headlines
    </span><span class="pun">};</span><span class="pln">

    expect</span><span class="pun">(</span><span class="pln">headlinesReducer</span><span class="pun">(</span><span class="pln">loadingState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)).</span><span class="pln">toEqual</span><span class="pun">({</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        headlines</span><span class="pun">:</span><span class="pln"> </span><span class="str">&quot;A headline&quot;</span><span class="pun">,</span><span class="pln">
        error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>Note that we&#x27;ve created a few new constants for this test. <code class="prettyprint prettyprinted"><span class="pln">loadingState</span></code> is an object where <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> is set to <code class="prettyprint prettyprinted"><span class="kwd">true</span></code>. We also have a constant called <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> which is storing a string. Our reducer doesn&#x27;t care what the payload will look like - for the purposes of our test, we just want to make sure our new action will update the <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> property correctly.</p>
<p>Our test will verify that when the <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_SUCCESS</span></code> action is triggered, <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> will be set to false and the <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> property will be updated to the payload (in this case, a string).</p>
<p>Once we make sure the test fails, we can update our reducer to make it pass:</p>
<div class="filename">src/reducers/headlines-reducer</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as c from </span><span class="str">&#x27;./../actions/ActionTypes&#x27;</span><span class="pun">;</span><span class="pln">

let initialState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
  headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
  error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">default</span><span class="pln"> </span><span class="pun">(</span><span class="pln">state </span><span class="pun">=</span><span class="pln"> initialState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">action</span><span class="pun">.</span><span class="pln">type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">case</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">REQUEST_HEADLINES</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> state</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
      </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">case</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_SUCCESS</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> state</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        headlines</span><span class="pun">:</span><span class="pln"> action</span><span class="pun">.</span><span class="pln">headlines
      </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>Our new action uses <code class="prettyprint prettyprinted"><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">()</span></code> to make a copy of the <code class="prettyprint prettyprinted"><span class="pln">state</span></code> object where <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> is set to <code class="prettyprint prettyprinted"><span class="kwd">false</span></code> and the <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> property is set to <code class="prettyprint prettyprinted"><span class="pln">action</span><span class="pun">.</span><span class="pln">headlines</span></code> - the payload we&#x27;ve passed into our action.</p>
<p>If we run our tests, our latest test will pass.</p>
<h2 id="testing-and-writing-get_headlines_failure">Testing and Writing <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_FAILURE</span></code></h2>
<p>We have one final action to test and write - <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_FAILURE</span></code>. Both the test and the reducer action will look very similar to <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_SUCCESS</span></code>. Here&#x27;s the test:</p>
<div class="filename">src/__tests__/reducers/headlines-reducer.test.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="pun">...</span><span class="pln">
  test</span><span class="pun">(</span><span class="str">&#x27;failing to get headlines should change isLoading to false and add an error message&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> error </span><span class="pun">=</span><span class="pln"> </span><span class="str">&quot;An error&quot;</span><span class="pun">;</span><span class="pln">
    action </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_FAILURE</span><span class="pun">,</span><span class="pln">
      error
    </span><span class="pun">};</span><span class="pln">

    expect</span><span class="pun">(</span><span class="pln">headlinesReducer</span><span class="pun">(</span><span class="pln">loadingState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)).</span><span class="pln">toEqual</span><span class="pun">({</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
        error</span><span class="pun">:</span><span class="pln"> </span><span class="str">&quot;An error&quot;</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">...</span></code></pre>
<p>We create an <code class="prettyprint prettyprinted"><span class="pln">error</span></code> constant that holds a string. The action itself looks very similar to <code class="prettyprint prettyprinted"><span class="pln">GET_HEADLINES_SUCCESS</span></code> - the only difference is the payload. We&#x27;ll expect the new state to have <code class="prettyprint prettyprinted"><span class="pln">isLoading</span></code> set to <code class="prettyprint prettyprinted"><span class="kwd">false</span></code> and <code class="prettyprint prettyprinted"><span class="pln">error</span></code> set to <code class="prettyprint prettyprinted"><span class="str">&quot;An error&quot;</span></code>. Meanwhile, <code class="prettyprint prettyprinted"><span class="pln">headlines</span></code> will remain an empty array since it won&#x27;t change if we don&#x27;t get a successful payload.</p>
<p>Verify that the test fails. Then we can update our reducer:</p>
<div class="filename">src/reducers/headlines-reducer</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as c from </span><span class="str">&#x27;./../actions/ActionTypes&#x27;</span><span class="pun">;</span><span class="pln">

let initialState </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
  headlines</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[],</span><span class="pln">
  error</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">default</span><span class="pln"> </span><span class="pun">(</span><span class="pln">state </span><span class="pun">=</span><span class="pln"> initialState</span><span class="pun">,</span><span class="pln"> action</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">(</span><span class="pln">action</span><span class="pun">.</span><span class="pln">type</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">case</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">REQUEST_HEADLINES</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> state</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
      </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">case</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_SUCCESS</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> state</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        headlines</span><span class="pun">:</span><span class="pln"> action</span><span class="pun">.</span><span class="pln">headlines
      </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">case</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_FAILURE</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> state</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        isLoading</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln">
        error</span><span class="pun">:</span><span class="pln"> action</span><span class="pun">.</span><span class="pln">error
      </span><span class="pun">});</span><span class="pln">
    </span><span class="kwd">default</span><span class="pun">:</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> state</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>As we can see, the actions for success and failure are very similar - they just have different payloads.</p>
<p>At this point, our reducer is complete. It&#x27;s a simple reducer with only three actions so there&#x27;s no need to split it into smaller reducers and then use a root reducer. However, you should still split and combine reducers as your applications get larger.</p>
<h2 id="testing-and-writing-action-creators">Testing and Writing Action Creators</h2>
<p>Next, we&#x27;ll write action creators for our reducer actions. We&#x27;ll also test these action creators. Since this is just review, we will run through this quickly. Here are the tests:</p>
<div class="filename">src/__tests__/actions/index.test.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as actions from </span><span class="str">&#x27;./../../actions&#x27;</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as c from </span><span class="str">&#x27;./../../actions/ActionTypes&#x27;</span><span class="pun">;</span><span class="pln">

describe</span><span class="pun">(</span><span class="str">&#x27;headline reducer actions&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  it</span><span class="pun">(</span><span class="str">&#x27;requestHeadlines should create REQUEST_HEADLINES action&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    expect</span><span class="pun">(</span><span class="pln">actions</span><span class="pun">.</span><span class="pln">requestHeadlines</span><span class="pun">()).</span><span class="pln">toEqual</span><span class="pun">({</span><span class="pln">
      type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">REQUEST_HEADLINES
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">

  it</span><span class="pun">(</span><span class="str">&#x27;getHeadlinesSuccess should create GET_HEADLINES_SUCCESS action&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> headlines </span><span class="pun">=</span><span class="pln"> </span><span class="str">&quot;A headline&quot;</span><span class="pun">;</span><span class="pln">
    expect</span><span class="pun">(</span><span class="pln">actions</span><span class="pun">.</span><span class="pln">getHeadlinesSuccess</span><span class="pun">(</span><span class="pln">headlines</span><span class="pun">)).</span><span class="pln">toEqual</span><span class="pun">({</span><span class="pln">
      type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_SUCCESS</span><span class="pun">,</span><span class="pln">
      headlines
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">

  it</span><span class="pun">(</span><span class="str">&#x27;getHeadlinesFailure should create GET_HEADLINES_FAILURE action&#x27;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> error </span><span class="pun">=</span><span class="pln"> </span><span class="str">&quot;An error&quot;</span><span class="pun">;</span><span class="pln">
    expect</span><span class="pun">(</span><span class="pln">actions</span><span class="pun">.</span><span class="pln">getHeadlinesFailure</span><span class="pun">(</span><span class="pln">error</span><span class="pun">)).</span><span class="pln">toEqual</span><span class="pun">({</span><span class="pln">
      type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_FAILURE</span><span class="pun">,</span><span class="pln">
      error
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">});</span></code></pre>
<p>These tests just verify that the JavaScript functions we&#x27;ll create to handle our reducer actions actually complete the actions successfully.</p>
<p>Here are the functions to make our new tests pass:</p>
<div class="filename">src/actions/index.js</div>
<pre><code class="prettyprint lang-js prettyprinted"><span class="kwd">import</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> as c from </span><span class="str">&#x27;./ActionTypes&#x27;</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> requestHeadlines </span><span class="pun">=</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">({</span><span class="pln">
  type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">REQUEST_HEADLINES
</span><span class="pun">});</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> getHeadlinesSuccess </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">headlines</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">({</span><span class="pln">
  type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_SUCCESS</span><span class="pun">,</span><span class="pln">
  headlines
</span><span class="pun">});</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> getHeadlinesFailure </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">error</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">({</span><span class="pln">
  type</span><span class="pun">:</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">GET_HEADLINES_FAILURE</span><span class="pun">,</span><span class="pln">
  error
</span><span class="pun">});</span></code></pre>
<p>Note that we export each of them separately.</p>
<h2 id="summary">Summary</h2>
<p>At this point, we&#x27;ve planned out the basic state of our store and how our reducer will change it. We created constants for each of our reducer actions and then tested and created a reducer that will update the store when we make an API call. Finally, we tested and wrote action creators that will make it easier to dispatch our actions in our application.</p>
<p>However, we still haven&#x27;t set up our Redux store or Thunk middleware. We also need to write an async action that will make an API call.</p>
<p>In the next lesson, we&#x27;ll add Redux to our application and set up our store. Then we will use the information we learned in the previous lesson on Redux middleware to write a simple piece of custom middleware.</p>
<p>Finally, in the lesson after that, we&#x27;ll incorporate Thunk and an async action.</p>
</div>
</div>
<p class="text-center text-muted">
Lesson 4 of 24<br/>
Last updated June 30, 2021
</p>
</div>
</div>
</div>
<nav class="navbar navbar-default navbar-fixed-top">
<div class="container">
<div class="navbar-header">
<button type="button" class="navbar-toggle collapsed btn btn-xs" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
<span class="sr-only">Search</span>
<span class="glyphicon glyphicon-search"></span>
</button>
<ul class="nav navbar-nav">
<a class="navbar-brand" href="/tracks">Tracks</a>
<li> </li><li><a href="/react/react-with-apis/introduction-to-redux-middleware">Previous</a></li>
<li><a href="/react/react-with-apis/writing-custom-middleware">Next</a></li>

</ul>
</div>
<div id="navbar" class="collapse navbar-collapse">
<ul class="nav navbar-nav pull-right">
<li id="navbar-search">
<form class="navbar-form navbar-left" action="/lessons" accept-charset="UTF-8" method="get"><input type="hidden" name="utf8" value="✓"/>
<div class="input-group">
<input type="text" name="search" id="search" placeholder="Search lessons" class="form-control"/>
<div class="input-group-btn">
<button name="button" type="submit" class="btn btn-info" id="lesson-search">
<span class="glyphicon glyphicon-search"></span>
</button> </div>
</div>
</form> </li>
</ul>
</div>
</div>
</nav>
<footer class="footer">
<div class="container">
<p><a href="http://www.epicodus.com" target="_blank"><img id="epicodus-logo" src="https://static1.squarespace.com/static/5524448ee4b0d6f6b83ab9e2/t/57cf3de246c3c4d2933aa57c/1529949737992/?format=1500w" title="Learn to program at Epicodus" alt="Learn to program at Epicodus"/></a></p>
<p>© 2021 <a href="http://www.epicodus.com/">Epicodus</a>, Inc.</p>
</div>
</footer>

<script type="text/javascript">
      var _usersnapconfig = { loadHandler: function() {UserSnap.on(&#x27;beforeSend&#x27;, function(obj) { obj.label = &quot;React&quot;; }) } };
      (function() { var s = document.createElement(&quot;script&quot;); s.type = &quot;text/javascript&quot;; s.async = true; s.src = &#x27;//api.usersnap.com/load/aa1422f9-9ca9-4942-8b1c-830007020e3d.js&#x27;;
      var x = document.getElementsByTagName(&#x27;script&#x27;)[0]; x.parentNode.insertBefore(s, x); })();
    </script>



<iframe name="us-entrypoint-setup" title="setup" style="display:none;height:0px;width:0px;z-index:2147483647"></iframe><iframe name="us-entrypoint-button" title="button" class="us–style-manager-1buttonIframe1627410705633 us–style-manager-2sizedIframe1627410705634" id="us–style-manager-1buttonIframe1627410705633" style="display:none;height:0px;width:0px;z-index:2147483647"></iframe><style type="text/css"></style><style type="text/css"></style></body></html>